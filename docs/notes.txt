*Brain Dump*

- Optional Arrow. Maybe just position offset and let users add any pointer or none?
- Smart Positioning and collision detection
- popover position property Top/Bottom/Left/Right 
	- http://www.codersgrid.com/2014/01/25/tether-js-positioning-element-programmatically/
	- https://closure-library.googlecode.com/git-history/docs/local_closure_goog_positioning_positioning.js.source.html

- Close on click out
- Open/Close programmatically
- Independent of target styling
- Target (element where popover appears) and Trigger (element that opens the popover) properties
- Events: dropover.opening, dropover.opened, dropover.closing, dropover.closed, dropover.rendered (template finished loading). Maybe emit and broadcast?
- Animation property? Slide *direction*, fade in. Built in? Maybe add classes for above ^ events?
- No JQuery dependency
- Trigger event property? trigger="somebutton" trigger-event="mouseover"
- Mobile friendly. Click/Tap
- Maybe mobile opens in a modal window?
- template and controller properties and HTML in element body
- Event listener cleanup
- All events propagate up and down
- Events will have the unique ID of the dropover contents so we can ignore interactions within dropover

- Review boostrap/JQuery popover code

- Custom Event
	{
		elementID
		angular/jquery/DOM event
		target
		
	}




Simple Use case
<div ng-drop-over class="users-button">
	Open DropOver
	<div ng-drop-over-content>
		This text is inside the dropover
		<div class="users-button" ng-click="$emit('ngDropOver.close', $event)">
			Close DropOver
		</div>
	</div>
</div>


Complexe Use case
<div class="users-button" ng-click="$emit('ngDropOver.open', {target:'dropOverMenu1'})">
	Open DropOver
</div>

<div ng-drop-over id="dropOverMenu1" ngdo-template="dropOverTemplate.html">
	DropOver will display under here
</div>




Idea
// Hide popovers when pressing esc
	$('body').on('keyup', function(ev) {
		if(ev.keyCode === 27) {
			$('#ng-popover').fadeOut(200, function() {
				$(this).remove();
				open = false;
			});
		}
	});